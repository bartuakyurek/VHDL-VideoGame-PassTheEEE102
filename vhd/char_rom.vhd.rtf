{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\ri-44\partightenfactor0

\f0\fs18 \cf0 library IEEE;\
use IEEE.STD_LOGIC_1164.all;\
use IEEE.NUMERIC_STD.all;\
\
entity char_rom is\
\'a0 port (\
	pixel_clk : in std_logic;\
\pard\pardeftab720\fi708\ri-44\partightenfactor0
\cf0 addr : in\'a0 std_logic_vector ( n downto 0 ); -- n is : 2 ** n = pixels in the char_rom\
\pard\pardeftab720\ri-44\partightenfactor0
\cf0 \'a0 \'a0 	char_rgb : out std_logic_vector (11 downto 0)); --rgb of one pixel in char\
end char_rom;\
\
architecture arch of char_rom is\
\
constant ADDR_WIDTH : integer := n;\
constant DATA_WIDTH : integer := 12;\
\
type rom_type is array ( 2 ** ADDR_WIDTH - 1) \
\pard\pardeftab720\li1416\fi708\ri-44\partightenfactor0
\cf0 of std_logic_vector (DATA_WIDTH - 1 downto 0) \
\pard\pardeftab720\ri-44\partightenfactor0
\cf0 \
constant CHAR : rom_type := (\
\
	\'93000000001111\'94 -- addr 00\
	\'93000000001111\'94 -- addr 01\
	\'93000000001111\'94 -- addr 02\
	\'93000000001111\'94 -- addr 03\
	\'93000000001111\'94 -- addr 04\
	\'93000000001111\'94 -- addr 05\
	\'93000000001111\'94 -- addr 06\
	\'93000000001111\'94 -- addr 07 -- e.g. this is where the first line of char ends, remember to add *\
\
	\'93000000001111\'94 -- addr 00\
	\'93000000001111\'94 -- addr 01\
	\'93000000001111\'94 -- addr 02\
	\'93000000001111\'94 -- addr 03\
	\'93000000001111\'94 -- addr 04\
	\'93000000001111\'94 -- addr 05\
	\'93000000001111\'94 -- addr 06\
	\'93000000001111\'94 -- addr 07\
\
	\'93000000001111\'94 -- addr 00\
	\'93000000001111\'94 -- addr 01\
	\'93000000001111\'94 -- addr 02\
	\'93000000001111\'94 -- addr 03\
	\'93000000001111\'94 -- addr 04\
	\'93000000001111\'94 -- addr 05\
	\'93000000001111\'94 -- addr 06\
	\'93000000001111\'94 -- addr 07\
\
	\'93000000001111\'94 -- addr 00\
	\'93000000001111\'94 -- addr 01\
	\'93000000001111\'94 -- addr 02\
	\'93000000001111\'94 -- addr 03\
	\'93000000001111\'94 -- addr 04\
	\'93000000001111\'94 -- addr 05\
	\'93000000001111\'94 -- addr 06\
	\'93000000001111\'94 -- addr 07\
\
	\'93000000001111\'94 -- addr 00\
	\'93000000001111\'94 -- addr 01\
	\'93000000001111\'94 -- addr 02\
	\'93000000001111\'94 -- addr 03\
	\'93000000001111\'94 -- addr 04\
	\'93000000001111\'94 -- addr 05\
	\'93000000001111\'94 -- addr 06\
	\'93000000001111\'94 -- addr 07\
\
	\'93000000001111\'94 -- addr 00\
	\'93000000001111\'94 -- addr 01\
	\'93000000001111\'94 -- addr 02\
	\'93000000001111\'94 -- addr 03\
	\'93000000001111\'94 -- addr 04\
	\'93000000001111\'94 -- addr 05\
	\'93000000001111\'94 -- addr 06\
	\'93000000001111\'94 -- addr 07\
\
	\'93000000001111\'94 -- addr 00\
	\'93000000001111\'94 -- addr 01\
	\'93000000001111\'94 -- addr 02\
	\'93000000001111\'94 -- addr 03\
	\'93000000001111\'94 -- addr 04\
	\'93000000001111\'94 -- addr 05\
	\'93000000001111\'94 -- addr 06\
	\'93000000001111\'94 -- addr 07\
);\
\
signal addr_reg : std_logic_vector ( ADDR_WIDTH - 1 downto 0);\
\
\
begin \
\
	process( pixel_clk ) begin\
		\
		if rising_edge(pixel_clk) then\
			addr_reg <= addr;\
		end if;\
	end process;\
\
	char_rgb <= CHAR ( to_integer( unsigned( addr_reg)));\
end arch;}